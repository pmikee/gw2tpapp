/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gw2tpapp;

import java.awt.BorderLayout;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;

/**
 *
 * @author Miki
 */
public final class guipanel extends javax.swing.JFrame {

    private Util util = new Util();
    private Item item = new Item();
    private Database db;
    public ItemDataWrapper idw = new ItemDataWrapper();
    ImageIcon image = null;
    HttpURLConnection connection = null;
    public ArrayList<Date> listing_date = new ArrayList<>();
    public List<Integer> unit_price = new ArrayList<>();
    public ArrayList<Integer> quantity = new ArrayList<>();
    public ArrayList<Integer> listings = new ArrayList<>();
    public Object[][] table_obj;
    /**
     * Creates new form guipanel
     */
    public JFrame frame;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        highestBuy = new javax.swing.JLabel();
        lowestSell = new javax.swing.JLabel();
        numSell = new javax.swing.JLabel();
        itemName = new javax.swing.JLabel();
        numBuy = new javax.swing.JLabel();
        lowestSellPrice = new javax.swing.JLabel();
        highestBuyPrice = new javax.swing.JLabel();
        img = new javax.swing.JLabel(image);
        numSellPieces = new javax.swing.JLabel();
        numBuyPieces = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        highestBuy.setText("jLabel5");

        lowestSell.setText("jLabel4");

        numSell.setText("jLabel6");

        itemName.setText("jLabel3");

        numBuy.setText("jLabel7");

        lowestSellPrice.setText("jLabel8");

        highestBuyPrice.setText("jLabel9");

        numSellPieces.setText("jLabel10");

        numBuyPieces.setText("jLabel11");

        jLabel1.setText("jLabel1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            table_obj,
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(img)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addGap(39, 39, 39)
                        .addComponent(itemName)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(numBuy)
                                .addGap(18, 18, 18)
                                .addComponent(numBuyPieces))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(highestBuy)
                                .addGap(18, 18, 18)
                                .addComponent(highestBuyPrice))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(lowestSell)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lowestSellPrice))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(numSell)
                                    .addGap(18, 18, 18)
                                    .addComponent(numSellPieces))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(img)
                    .addComponent(itemName)
                    .addComponent(jLabel1))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lowestSell)
                            .addComponent(lowestSellPrice))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(highestBuy)
                            .addComponent(highestBuyPrice))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numSell)
                            .addComponent(numSellPieces))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numBuy)
                            .addComponent(numBuyPieces)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(110, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel highestBuy;
    private javax.swing.JLabel highestBuyPrice;
    private javax.swing.JLabel img;
    private javax.swing.JLabel itemName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lowestSell;
    private javax.swing.JLabel lowestSellPrice;
    private javax.swing.JLabel numBuy;
    private javax.swing.JLabel numBuyPieces;
    private javax.swing.JLabel numSell;
    private javax.swing.JLabel numSellPieces;
    // End of variables declaration//GEN-END:variables
    private JFrame fr;

    public guipanel(Database db) throws SQLException, MalformedURLException, IOException {
        frame = new JFrame();
        //idw.getItemData(19721, "buy");
        getData();
        initComponents();
        GenGUI();
        frame.setVisible(true);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.db = db;
        frame.pack();
    }

    public void getData() throws SQLException, MalformedURLException, IOException {
        //Item it = db.getItemFromDB(19721);
        //     Image image = ImageLoader.fromUrl(it.getImg());
        getItemData(19721, "buy");
        //jLabel1.setText("kép");
        //jLabel1.updateUI();
        //itemName.setText(it.getName());
        
        System.out.println(unit_price.size());
        table_obj =  new Object[unit_price.size()][3];
        for (int i = 0; i < unit_price.size(); i++) {
            table_obj[i][0] = unit_price.get(i);
            table_obj[i][1] = quantity.get(i);
            table_obj[i][2] = listings.get(i);
        }
        //jTable1.updateUI();
        //jLabel1.setText("asd");
    }
    
    public void GenGUI(){
        frame.add(jPanel1, BorderLayout.CENTER);
    }

    public void getItemData(int id, String sellorbuy) {
        int page = 1;
        //int maxpage = getPageNumber();
        while (page < 5) {
            String jsonString = "";
            try {
                //SetupClient("http://www.gw2spidy.com/api/v0.9/json/items/all/" + page);
                String requestUrl = "http://www.gw2spidy.com/api/v0.9/json/listings/" + id + "/" + sellorbuy + "/" + page;
                URL url = new URL(requestUrl);
                connection = (HttpURLConnection) url.openConnection();

                connection.setRequestMethod("POST");
                connection.setRequestProperty("Content-Type",
                        "application/x-www-form-urlencoded");
                connection.setRequestProperty("Content-Language", "en-US");
                connection.setRequestProperty("User-Agent",
                        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11");
                //System.out.println("Connecting to gw2spidy.com");
                connection.setUseCaches(false);
                connection.setDoInput(true);
                connection.setDoOutput(true);
                InputStream is = connection.getInputStream();
                try (BufferedReader br = new BufferedReader(new InputStreamReader(is))) {
                    String inputLine;
                    while ((inputLine = br.readLine()) != null) {
                        jsonString = inputLine;
                    }
                }
                //System.out.println("Getting the item list...");
                JSONObject outer = (JSONObject) JSONSerializer.toJSON(jsonString);
                JSONArray items = outer.getJSONArray("results");
                //System.out.println("Parsing list...");
                //System.out.println(outer.getInt("count"));
                for (int i = 0; i < items.size(); i++) {
                    JSONObject json = (JSONObject) items.get(i);
                    //System.out.println(json.getInt("unit_price"));
                    unit_price.add(json.getInt("unit_price"));
                    quantity.add(json.getInt("quantity"));
                    listings.add(json.getInt("listings"));
                    DateFormat formatter;
                    Date date = null;
                    formatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
                    try {
                        date = (Date) formatter.parse(json.getString("listing_datetime"));
                    } catch (ParseException ex) {
                        Logger.getLogger(ItemDataWrapper.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //System.out.print(date + " ");
                    listing_date.add(date);

                }
                System.out.println("Max:" + Collections.max(unit_price));
                page++;
                System.out.println("Oldal:" + page);
            } catch (NullPointerException e) {
                System.out.println(e.getCause());
            } catch (FileNotFoundException fnf) {
                System.out.println(fnf.getCause());
                System.out.println("Az adott item nem található!");
            } catch (IOException e) {
                e.printStackTrace();
                //System.out.println("A szerver visszautasította a lekérést");
                System.out.println(e.getCause());

            }
        }
    }
}
